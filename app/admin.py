import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters import Filter, CommandStart, Command
from aiogram.fsm.context import FSMContext


from app.admin_keyboards import (admin_main_keyboard, admin_settings_menu, networks_keyboard, wallet_action,
                                 admin_warning_buttons, order_finish_buttons, exit_keyboard, admin_order_actions,
                                 order_info_menu, build_orders_keyboard)
from app.database.requests import (get_wallets, get_rate, get_support_contact, update_rate,
                                   update_support_contact, add_wallet, delete_wallet,
                                   update_order_status, get_order_info, get_user_info)
from app.states import (ExchangeRateChange, SupportContactChange, WalletManagement, OrderCancellation, OrderInfo,
                        UserInfo, AdminOrderInfo, Mailing)

from app.admin_func.mailing import start_mailing

import logging
logging.basicConfig(level=logging.DEBUG)


admin = Router()


class Admin(Filter):
    def __init__(self):
        self.admins = [7185429091]

    async def __call__(self, message: Message):
        return message.from_user.id in self.admins
    

@admin.message(Admin(), Command('admin'))
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=admin_main_keyboard)


@admin.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞‚öôÔ∏è')
async def bot_settings_info(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    wallets = await get_wallets()
    rate_value = await get_rate()
    support_contact = await get_support_contact()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    wallet_info = "\n".join([f"–°–µ—Ç—å: {wallet.network}, –ö–æ—à–µ–ª–µ–∫: {wallet.address}" for wallet in wallets])

    info_message = (
        f"üìä –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {rate_value}\n\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {support_contact}\n\n"
        f"üíº –ö–æ—à–µ–ª—å–∫–∏: {wallet_info}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer(info_message, reply_markup=admin_settings_menu)


# –ú–µ–Ω—è–µ–º –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
@admin.callback_query(F.data == "edit_rate")
async def rate_exchange_change(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 41.72 (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)")
    await state.set_state(ExchangeRateChange.waiting_for_new_exchange_rate)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞


@admin.message(ExchangeRateChange.waiting_for_new_exchange_rate)
async def process_rate_change(message: Message, state: FSMContext):
    new_exchange_rate = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    if not re.match(r"^-?\d*\.?\d+$", new_exchange_rate):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å\n –ß–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –≤ —Ñ–æ—Ä–º–∞—Ç–µ  41.72, 42.0 –∏ —Ç.–¥.')
        return

    new_exchange_rate = float(new_exchange_rate)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_rate(new_exchange_rate)

    await message.answer(f"–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_exchange_rate}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–∞–ø–æ—Ä—Ç–∞
@admin.callback_query(F.data == "edit_support_contact")
async def support_contact_change(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ —Å–∞–ø–æ—Ä—Ç–∞
    await state.set_state(SupportContactChange.waiting_for_new_support_contact)


@admin.message(SupportContactChange.waiting_for_new_support_contact)
async def process_contact_change(message: Message, state: FSMContext):
    new_support_contact = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if not re.match(r"^@", new_support_contact):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @')
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_support_contact(new_support_contact)

    await message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_support_contact}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_keyboard)


@admin.callback_query(F.data == "edit_wallets")
async def edit_wallets(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=wallet_action)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
@admin.callback_query(F.data == "add_wallet")
async def add_wallets(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, BEP-20, TRC-20, ERC-20, TON):",
        reply_markup=networks_keyboard
    )
    await state.set_state(WalletManagement.waiting_for_network)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ç–∏
@admin.message(WalletManagement.waiting_for_network)
async def process_network(message: Message, state: FSMContext):
    network = message.text
    await state.update_data(network=network)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞:")
    await state.set_state(WalletManagement.waiting_for_address)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
@admin.message(WalletManagement.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    address = message.text
    data = await state.get_data()
    network = data.get("network")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_wallet(network, address)
        await message.answer(f"–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n–°–µ—Ç—å: {network}\n–ê–¥—Ä–µ—Å: {address}")

    except Exception as e:
        logging.error(f"Error adding wallet: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞.")

    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
@admin.callback_query(F.data == "delete_wallet")
async def delete_wallets(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(WalletManagement.waiting_for_delete_address)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
@admin.message(WalletManagement.waiting_for_delete_address)  # Changed from waiting_for_address
async def process_delete_address(message: Message, state: FSMContext):
    address = message.text

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = await delete_wallet(address)  # Added await here

        if result:
            await message.answer(f"–ö–æ—à–µ–ª–µ–∫ —Å –∞–¥—Ä–µ—Å–æ–º {address} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer(f"–ö–æ—à–µ–ª–µ–∫ —Å –∞–¥—Ä–µ—Å–æ–º {address} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        logging.error(f"Error deleting wallet: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞.")

    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_main_keyboard)


@admin.callback_query(F.data == "order_finished")
async def finish_order(callback: CallbackQuery):
    try:
        # Get order ID from caption instead of text
        message_caption = callback.message.caption
        if not message_caption:
            raise ValueError("Message caption is empty")

        order_id = int(message_caption.split('ID –æ—Ä–¥–µ—Ä–∞: ')[1].split('\n')[0])

        # Update order status in database
        await update_order_status(order_id, "–û—Ä–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚úÖ")

        # Get updated order info
        order_info = await get_order_info(order_id)

        if order_info:
            # Format updated message
            updated_caption = (
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞!\n\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                f"üí∞ –í–∞–ª—é—Ç–∞: {order_info['currency']}\n"
                f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH "
                f"(‚âà {float(order_info['value']):.2f} {order_info['currency']})\n"
                f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
                f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
            )

            # Edit original message (photo with caption)
            await callback.message.edit_caption(
                caption=updated_caption,
                reply_markup=admin_order_actions
            )

            # Notify user about order completion
            try:
                await callback.bot.send_message(
                    order_info['user_id'],
                    f"‚úÖ –í–∞—à –æ—Ä–¥–µ—Ä #{order_info['id']} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
                )
            except Exception as e:
                logging.error(f"Failed to notify user about order completion: {e}")

        await callback.answer("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        logging.error(f"Error in finish_order: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ä–¥–µ—Ä–∞")


@admin.callback_query(F.data == "cancel_order_by_admin")
async def cancel_order_warning(callback: CallbackQuery, state: FSMContext):
    try:
        # Extract order ID from caption instead of text
        message_caption = callback.message.caption
        if not message_caption:
            raise ValueError("Message caption is empty")

        order_id = int(message_caption.split('ID –æ—Ä–¥–µ—Ä–∞: ')[1].split('\n')[0])

        # Store order ID and message info in state
        await state.update_data({
            'order_id': order_id,
            'message_id': callback.message.message_id,
            'chat_id': callback.message.chat.id
        })

        # Send warning message with confirmation buttons
        await callback.message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä?",
            reply_markup=admin_warning_buttons
        )

        # Set state to waiting for confirmation
        await state.set_state(OrderCancellation.waiting_for_confirmation)

        await callback.answer()

    except Exception as e:
        logging.error(f"Error in cancel_order_warning: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@admin.message(OrderCancellation.waiting_for_confirmation, F.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚ùå")
async def confirm_cancel_order(message: Message, state: FSMContext):
    try:
        # Get order ID and message info from state
        data = await state.get_data()
        order_id = data.get('order_id')
        original_message_id = data.get('message_id')
        chat_id = data.get('chat_id')

        # Update order status in database
        await update_order_status(order_id, "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚ùå")

        # Get updated order info
        order_info = await get_order_info(order_id)

        if order_info:
            # Format updated message
            updated_message = (
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞!\n\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                f"üí∞ –í–∞–ª—é—Ç–∞: {order_info['currency']}\n"
                f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH "
                f"(‚âà {float(order_info['value']):.2f} {order_info['currency']})\n"
                f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
                f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
            )

            # Try to delete the original message
            try:
                await message.bot.delete_message(chat_id=chat_id, message_id=original_message_id)
            except Exception as e:
                logging.error(f"Error deleting original message: {e}")

            # Send new message with updated info
            if order_info.get('file_id'):
                # If there's a screenshot, send photo with caption
                await message.bot.send_photo(
                    chat_id=chat_id,
                    photo=order_info['file_id'],
                    caption=updated_message
                )
            else:
                # If no screenshot, send text message
                await message.bot.send_message(
                    chat_id=chat_id,
                    text=updated_message
                )

            # Notify the user about order cancellation
            try:
                await message.bot.send_message(
                    order_info['user_id'],
                    f"‚ùå –í–∞—à –æ—Ä–¥–µ—Ä #{order_info['id']} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
            except Exception as e:
                logging.error(f"Failed to notify user about order cancellation: {e}")

        await message.answer("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!", reply_markup=admin_main_keyboard)
        await state.clear()

    except Exception as e:
        logging.error(f"Error in confirm_cancel_order: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞", reply_markup=admin_main_keyboard)
        await state.clear()


@admin.callback_query(F.data == "cancel_order_by_admin")
async def cancel_order_warning(callback: CallbackQuery, state: FSMContext):
    try:
        # Extract order ID and store the message ID for later update
        message_text = callback.message.text
        order_id = int(message_text.split('ID –æ—Ä–¥–µ—Ä–∞: ')[1].split('\n')[0])

        # Store order ID and message info in state
        await state.update_data({
            'order_id': order_id,
            'message_id': callback.message.message_id,
            'chat_id': callback.message.chat.id
        })

        # Send warning message with confirmation buttons
        await callback.message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä?",
            reply_markup=admin_warning_buttons
        )

        # Set state to waiting for confirmation
        await state.set_state(OrderCancellation.waiting_for_confirmation)

        await callback.answer()

    except Exception as e:
        logging.error(f"Error in cancel_order_warning: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞")


@admin.message(OrderCancellation.waiting_for_confirmation, F.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚ùå")
async def confirm_cancel_order(message: Message, state: FSMContext):
    try:
        # Get order ID and message info from state
        data = await state.get_data()
        order_id = data.get('order_id')
        original_message_id = data.get('message_id')
        chat_id = data.get('chat_id')

        # Update order status in database
        await update_order_status(order_id, "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

        # Get updated order info
        order_info = await get_order_info(order_id)

        if order_info:
            # Format updated message
            updated_message = (
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞!\n\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                f"üí∞ –í–∞–ª—é—Ç–∞: {order_info['currency']}\n"
                f"üíµ –°—É–º–º–∞: {order_info['value']} {order_info['currency']} "
                f"(‚âà {float(order_info['value']):.2f} {'UAH' if order_info['currency'] == 'USDT' else 'USDT'})\n"
                f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
                f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
            )

            # Update the original message without inline keyboard
            await message.bot.edit_message_text(
                chat_id=chat_id,
                message_id=original_message_id,
                text=updated_message
            )

            # Notify the user about order cancellation
            try:
                await message.bot.send_message(
                    order_info['user_id'],
                    f"‚ùå –í–∞—à –æ—Ä–¥–µ—Ä #{order_info['id']} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
            except Exception as e:
                logging.error(f"Failed to notify user about order cancellation: {e}")

        await message.answer("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!", reply_markup=admin_main_keyboard)
        await state.clear()

    except Exception as e:
        logging.error(f"Error in confirm_cancel_order: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞", reply_markup=admin_main_keyboard)
        await state.clear()


@admin.message(OrderCancellation.waiting_for_confirmation, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å‚úÖ")
async def confirm_finish_order(message: Message, state: FSMContext):
    try:
        # Get order ID and message info from state
        data = await state.get_data()
        order_id = data.get('order_id')
        original_message_id = data.get('message_id')
        chat_id = data.get('chat_id')

        # Update order status in database
        await update_order_status(order_id, "–û—Ä–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚úÖ")

        # Get updated order info
        order_info = await get_order_info(order_id)

        if order_info:
            # Format updated message
            updated_message = (
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞!\n\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                f"üí∞ –í–∞–ª—é—Ç–∞: {order_info['currency']}\n"
                f"üíµ –°—É–º–º–∞: {order_info['value']} {order_info['currency']} "
                f"(‚âà {float(order_info['value']):.2f} {'UAH' if order_info['currency'] == 'USDT' else 'USDT'})\n"
                f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
                f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
            )

            # Update the original message without inline keyboard
            await message.bot.edit_message_text(
                chat_id=chat_id,
                message_id=original_message_id,
                text=updated_message
            )

            # Notify the user about order cancellation
            try:
                await message.bot.send_message(
                    order_info['user_id'],
                    f"‚úÖ –í–∞—à –æ—Ä–¥–µ—Ä ‚Ññ {order_info['id']} –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                )
            except Exception as e:
                logging.error(f"Failed to notify user about order finishing: {e}")

        await message.answer("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=admin_main_keyboard)
        await state.clear()

    except Exception as e:
        logging.error(f"Error in confirm_finish_order: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞", reply_markup=admin_main_keyboard)
        await state.clear()


@admin.message(OrderCancellation.waiting_for_confirmation, F.text == "–ù–µ –æ—Ç–º–µ–Ω—è—Ç—åüîô")
async def cancel_order_cancellation(message: Message, state: FSMContext):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_main_keyboard)
    await state.clear()


@admin.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–∞—Öüí∏")
async def admin_order_menu(message: Message):
    await message.answer("–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –æ—Ä–¥–µ—Ä –ø–æ ID –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–æ–º",
                         reply_markup=order_info_menu
                         )


@admin.callback_query(F.data == "search_order")
async def search_order(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=exit_keyboard
    )
    await state.set_state(AdminOrderInfo.waiting_for_order_id)
    await callback.answer()


@admin.message(AdminOrderInfo.waiting_for_order_id)
async def process_admin_order_id(message: Message, state: FSMContext):
    if message.text == "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—éüö™":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_main_keyboard)
        await state.clear()
        return

    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ä–¥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", reply_markup=exit_keyboard)
        return

    order_id = int(message.text)
    order_info = await get_order_info(order_id)

    if order_info is None:
        await message.answer("–û—Ä–¥–µ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=admin_main_keyboard)
        await state.clear()
        return

    order_message = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ:\n"
        f"üî¢ ID: {order_info['id']}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_info['user_id']}\n"
        f"üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞: {order_info['currency']}\n"
        f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH "
        f"(‚âà {float(order_info['value']):.2f} {order_info['currency']})\n"
        f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
        f"üåê –°–µ—Ç—å: {order_info['network']}\n"
        f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
        f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
        f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {order_info['date_created'].strftime('%Y-%m-%d %H:%M:%S')}"
    )

    await message.answer(order_message, reply_markup=admin_order_actions)
    await message.answer("–û—Ä–¥–µ—Ä –Ω–∞–π–¥–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.", reply_markup=admin_main_keyboard)
    await state.clear()


@admin.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µüë•")
async def request_user_id(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=exit_keyboard
    )
    await state.set_state(UserInfo.waiting_for_user_id)


@admin.message(UserInfo.waiting_for_user_id)
async def admin_process_user_id(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é"
    if message.text == "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—éüö™":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_main_keyboard)
        await state.clear()
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
            reply_markup=exit_keyboard
        )
        return

    user_id = int(message.text)
    user_info = await get_user_info(user_id)

    if user_info is None:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=admin_main_keyboard
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —é–∑–µ—Ä–µ
    user_info_message = (
        f"üëÅ‚Äçüó®–Æ–∑–µ—Ä–Ω–µ–π–º –¢–ì: {user_info['username']}\n"
        f"üßî‚Äç‚ôÇÔ∏è–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info['full_name']}\n"
        f"üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info['phone_number']}\n"
        f"üë§–ù–∏–∫–Ω–µ–π–º: {user_info['nickname']}\n"
        f"üí≥–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {user_info['bank_card']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —é–∑–µ—Ä–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await message.answer(
        user_info_message,
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=admin_main_keyboard
    )
    await state.clear()


@admin.message(OrderInfo.waiting_for_order_id, F.text == "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—éüö™")
async def exit_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=admin_main_keyboard
    )


@admin.callback_query(F.data == "order_list")
@admin.callback_query(F.data.startswith("order_list_"))
async def order_list_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        command = callback.data
        page = 1 if command == "order_list" else int(command.split("_")[-1])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await build_orders_keyboard(page)
        if not keyboard:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message.photo:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer(
                text="–°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤:",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await callback.message.edit_text(
                text="–°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤:",
                reply_markup=keyboard
            )

        await callback.answer()

    except Exception as e:
        logging.error(f"Error in order list callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤")


@admin.callback_query(F.data.startswith("order_info_"))
async def order_info_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ callback_data
        order_id = int(callback.data.split('_')[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
        order_info = await get_order_info(order_id)

        if not order_info:
            await callback.answer("–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
        message_text = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
            f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_info['user_id']}\n"
            f"üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞: {order_info['currency']}\n"
            f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH "
            f"(‚âà {float(order_info['value']):.2f} {order_info['currency']})\n"
            f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
            f"üåê –°–µ—Ç—å: {order_info['network']}\n"
            f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
            f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {order_info['date_created'].strftime('%Y-%m-%d %H:%M:%S')}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        builder.row(InlineKeyboardButton(
            text="–ó–∞–≤–µ—Ä—à–∏—Ç—å‚úÖ",
            callback_data=f"order_finished_{order_id}"
        ))

        builder.row(InlineKeyboardButton(
            text="–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä‚ùå",
            callback_data=f"cancel_order_by_admin_{order_id}"
        ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥
        builder.row(InlineKeyboardButton(
            text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="order_list"
        ))

        # –ï—Å–ª–∏ –µ—Å—Ç—å file_id (—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if order_info.get('file_id'):
            try:
                await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
                await callback.message.answer_photo(
                    photo=order_info['file_id'],
                    caption=message_text,
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                logging.error(f"Error sending photo: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    text=message_text + "\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
                    reply_markup=builder.as_markup()
                )
        else:
            # –ï—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                text=message_text + "\n\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                reply_markup=builder.as_markup()
            )

        await callback.answer()

    except Exception as e:
        logging.error(f"Error in order info callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ")


@admin.callback_query(F.data == "current_page")
async def current_page_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")


@admin.callback_query(F.data.startswith("cancel_order_by_admin_"))
async def cancel_order_warning_new(callback: CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ callback_data
        order_id = int(callback.data.split('_')[-1])

        # Store order ID and message info in state
        await state.update_data({
            'order_id': order_id,
            'message_id': callback.message.message_id,
            'chat_id': callback.message.chat.id
        })

        # Send warning message with confirmation buttons
        await callback.message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä?",
            reply_markup=admin_warning_buttons
        )

        # Set state to waiting for confirmation
        await state.set_state(OrderCancellation.waiting_for_confirmation)

        await callback.answer()

    except Exception as e:
        logging.error(f"Error in cancel_order_warning_new: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞")


@admin.callback_query(F.data.startswith("order_finished_"))
async def finish_order_new(callback: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ callback_data
        order_id = int(callback.data.split('_')[-1])

        # Update order status in database
        await update_order_status(order_id, "–û—Ä–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚úÖ")

        # Get updated order info
        order_info = await get_order_info(order_id)

        if order_info:
            # Format updated message
            updated_message = (
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞!\n\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                f"üí∞ –í–∞–ª—é—Ç–∞: {order_info['currency']}\n"
                f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH "
                f"(‚âà {float(order_info['value']):.2f} {order_info['currency']})\n"
                f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
                f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="order_list"
            ))

            # Delete original message and send new one
            await callback.message.delete()

            if order_info.get('file_id'):
                # If there's a screenshot, send photo with caption
                await callback.message.answer_photo(
                    photo=order_info['file_id'],
                    caption=updated_message,
                    reply_markup=builder.as_markup()
                )
            else:
                # If no screenshot, send text message
                await callback.message.answer(
                    text=updated_message,
                    reply_markup=builder.as_markup()
                )

            # Notify user about order completion
            try:
                await callback.bot.send_message(
                    order_info['user_id'],
                    f"‚úÖ –í–∞—à –æ—Ä–¥–µ—Ä #{order_info['id']} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
                )
            except Exception as e:
                logging.error(f"Failed to notify user about order completion: {e}")

        await callback.answer("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        logging.error(f"Error in finish_order_new: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ä–¥–µ—Ä–∞")


@admin.message(Admin(), F.text == "–†–∞—Å—Å—ã–ª–∫–∞üì®")
async def handle_mailing(message: Message, state: FSMContext):
    await start_mailing(message, state)
