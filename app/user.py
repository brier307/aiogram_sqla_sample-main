import re
import random
import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart

from aiogram.fsm.context import FSMContext

from app.states import Form, OrderForm, NicknameChange, BankCardChange, OrderCancel, OrderPaid, OrderInfo

from app.database.requests import (set_user, update_user_data, get_user_info, update_nickname, update_bank_card,
                                   create_order, get_rate, get_wallets, get_order_info, get_support_contact,
                                   update_order_status, get_order_status)
from app.user_keyboard import *
from app.admin_keyboards import admin_order_actions
from config import ADMIN
from app.luhn import validate_card

logging.basicConfig(level=logging.INFO)


# from middlewares import BaseMiddleware

user = Router()

# user.message.middleware(BaseMiddleware())


@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message.from_user
    tg_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user_exists = await set_user(tg_id, username, full_name)

    if user_exists:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
                             '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é‚öôÔ∏è',
                             reply_markup=user_main_keyboard)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', reply_markup=phone_button)
        await state.set_state(Form.phone_number)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@user.message(Form.phone_number, F.contact)
async def process_phone_number(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await update_user_data(message.from_user.id, 'phone_number', phone_number)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º.', reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.nickname)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
@user.message(Form.nickname)
async def process_nickname(message: Message, state: FSMContext):
    nickname = message.text
    await update_user_data(message.from_user.id, 'nickname', nickname)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã.')
    await state.set_state(Form.bank_card)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
@user.message(Form.bank_card)
async def process_bank_card(message: Message, state: FSMContext):
    bank_card = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if not re.match(r'^\d{16}$', bank_card):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä).')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ—É–Ω–∞
    if not validate_card(bank_card):
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    await update_user_data(message.from_user.id, 'bank_card', bank_card)
    await message.answer('–°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.', reply_markup=user_main_keyboard)
    await state.clear()


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ
@user.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ‚öôÔ∏è')
async def profile_info(message: Message):
    tg_id = message.from_user.id
    user_info = await get_user_info(tg_id)

    if user_info:
        profile_details = (
            f"üÜîID: {user_info['tg_id']}\n"
            f"üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info['phone_number']}\n"
            f"üë§–ù–∏–∫–Ω–µ–π–º: {user_info['nickname']}\n"
            f"üí≥–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {user_info['bank_card']}"
        )
        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:\n{profile_details}",
                             reply_markup=user_profile_menu)
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@user.callback_query(F.data == "change_nickname")
async def change_nickname(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:")
    await state.set_state(NicknameChange.waiting_for_new_nickname)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞


@user.message(NicknameChange.waiting_for_new_nickname)
async def process_nickname(message: Message, state: FSMContext):
    new_nickname = message.text
    tg_id = message.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_nickname(tg_id, new_nickname)

    await message.answer(f"–ù–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_nickname}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=user_main_keyboard)


@user.callback_query(F.data == "change_bank_card")
async def change_bank_card(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É:")
    await state.set_state(BankCardChange.waiting_for_new_bank_card)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞


@user.message(BankCardChange.waiting_for_new_bank_card)
async def process_bank_card(message: Message, state: FSMContext):
    new_bank_card = message.text
    tg_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    if not re.match(r'^\d{16}$', new_bank_card):
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä).')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ—É–Ω–∞
    if not validate_card(new_bank_card):
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_bank_card(tg_id, new_bank_card)

    await message.answer(f"–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {new_bank_card}")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=user_main_keyboard)


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@user.message(F.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞üÜò')
async def support_info(message: Message):
    support_contact = await get_support_contact()
    await message.answer(f"–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ {support_contact}")


@user.message(F.text == "–ü—Ä–æ–¥–∞—Ç—å USDTüíµ")
async def start_order(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã:", reply_markup=usdtuah_keyboard)
    await state.set_state(OrderForm.currency)
    logging.info(f"User {message.from_user.id} started order creation")


@user.message(F.text == "–û—Ç–º–µ–Ω–∞‚ùå")
async def cancel_order(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and current_state.startswith('OrderForm:'):
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=user_main_keyboard)
        logging.info(f"User {message.from_user.id} cancelled order creation")


@user.message(OrderForm.currency, F.text.in_(["USDT", "UAH"]))
async def process_currency(message: Message, state: FSMContext):
    currency = message.text
    await state.update_data(currency=currency)

    response_text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {currency}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ USDT, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ UAH:"
        if currency == "USDT"
        else f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {currency}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ UAH, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —Å–≤–æ–∏ USDT:"
    )

    await message.answer(response_text, reply_markup=user_back_button)
    await state.set_state(OrderForm.value)
    logging.info(f"User {message.from_user.id} selected currency: {currency}")


@user.message(OrderForm.value)
async def process_value(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—èüîô":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã:", reply_markup=usdtuah_keyboard)
            await state.set_state(OrderForm.currency)
            return

        value = float(message.text)
        data = await state.get_data()
        currency = data['currency']
        rate = await get_rate()

        if currency == 'USDT':
            usdt_amount = value
            uah_amount = value * rate
        else:  # UAH
            usdt_amount = value / rate
            uah_amount = value

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–µ —Å—É–º–º—ã –≤ state
        await state.update_data(
            value=usdt_amount,  # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ USDT
            original_value=value,  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            original_currency=currency,  # –í–∞–ª—é—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª —Å—É–º–º—É
            converted_value=uah_amount if currency == 'USDT' else usdt_amount  # –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        )

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=networks_keyboard)
        await state.set_state(OrderForm.network)
        logging.info(f"User {message.from_user.id} entered value: {value} {currency}")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=user_back_button)
    except Exception as e:
        logging.error(f"Error in process_value: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=user_back_button)


@user.message(OrderForm.network)
async def process_network(message: Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—èüîô":
        data = await state.get_data()
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {data['currency']}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=user_back_button)
        await state.set_state(OrderForm.value)
        return

    network = message.text
    await state.update_data(network=network)
    await show_order_summary(message, state)
    logging.info(f"User {message.from_user.id} selected network: {network}")


@user.message(OrderForm.confirm_order)
async def process_confirmation(message: Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—èüîô":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=networks_keyboard)
        await state.set_state(OrderForm.network)
        return
    elif message.text in ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]:
        await confirm_order(message, state)


@user.message(OrderForm.confirm_order, F.text.in_(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]))
async def confirm_order(message: Message, state: FSMContext):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        try:
            data = await state.get_data()
            user_info = await get_user_info(message.from_user.id)
            rate = await get_rate()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
            # –í–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ USDT
            order_id = await create_order(
                user_id=message.from_user.id,
                currency='USDT',  # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ USDT
                value=str(data['value']),  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤ USDT
                exchange_rate=rate,
                network=data['network'],
                bank_card=user_info['bank_card'],
                wallet=data['wallet']
            )

            if not order_id:
                raise ValueError("Failed to create order: no order ID returned")

            order_info = await get_order_info(order_id)

            if not order_info:
                raise ValueError(f"Failed to get order info for order ID: {order_id}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
            original_currency = data.get('original_currency', 'USDT')
            admin_notification = (
                f"üÜï –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä!\n\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username}) ID:{message.from_user.id}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone_number']}\n"
                f"üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞: {original_currency}\n"
                f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH "
                f"(‚âà {float(order_info['value']):.2f} {order_info['currency']})\n"
                f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
                f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN:
                try:
                    await message.bot.send_message(
                        chat_id=admin_id,
                        text=admin_notification,
                        reply_markup=admin_order_actions
                    )
                    logging.info(f"Notification sent to admin {admin_id}")
                except Exception as e:
                    logging.error(f"Failed to send notification to admin {admin_id}: {e}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_notification = (
                f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH "
                f"(‚âà {float(order_info['value']):.2f} {order_info['currency']})\n"
                f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UAH: {order_info['bank_card']}\n"
                f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ USDT: {order_info['wallet']}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
            )

            await message.answer(
                f"–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n{user_notification}",
                reply_markup=user_order_actions
            )
            logging.info(f"Order {order_id} created for user {message.from_user.id}")

            await message.answer(
                f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–∏—Ö –æ—Ä–¥–µ—Ä–∞—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é",
                reply_markup=user_main_keyboard
            )

        except Exception as e:
            logging.error(f"Error in confirm_order: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=user_main_keyboard
            )
        finally:
            await state.clear()
    else:
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=user_main_keyboard)
        await state.clear()


@user.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == OrderForm.value:
        await start_order(message, state)
    elif current_state == OrderForm.network:
        await state.set_state(OrderForm.currency)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã:", reply_markup=usdtuah_keyboard)
    elif current_state == OrderForm.confirm_order:
        await state.set_state(OrderForm.network)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=networks_keyboard)
    else:
        await message.answer("–ù–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.", reply_markup=user_main_keyboard)
        await state.clear()
    logging.info(f"User {message.from_user.id} went back from state {current_state}")


async def show_order_summary(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = message.from_user.id
        user_info = await get_user_info(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        wallets = await get_wallets()
        matching_wallets = [w for w in wallets if w.network == data['network']]
        wallet = random.choice(matching_wallets).address if matching_wallets else None

        if not wallet:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∏–∑ –ë–î
        exchange_rate = await get_rate()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        await state.update_data(
            wallet=wallet,
            bank_card=user_info['bank_card']
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã
        original_currency = data.get('original_currency', 'USDT')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'original_value' not in data:
            raise ValueError("Missing original_value in state data")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å—É–º–º–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        if original_currency == 'USDT':
            uah_amount = float(data['original_value']) * exchange_rate
            usdt_amount = float(data['original_value'])
        else:  # UAH
            uah_amount = float(data['original_value'])
            usdt_amount = float(data['original_value']) / exchange_rate

        order_summary = (
            f"üíµ –°—É–º–º–∞: {uah_amount:.2f} UAH "
            f"(‚âà {usdt_amount:.2f} USDT)\n"
            f"üåê –°–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {data['network']}\n"
            f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {user_info['bank_card']}\n"
        )

        confirm_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:\n{order_summary}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
            reply_markup=confirm_keyboard
        )
        await state.set_state(OrderForm.confirm_order)

    except Exception as e:
        logging.error(f"Error in show_order_summary: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()


@user.callback_query(F.data == "cancel_order_by_user")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    try:
        message_text = callback.message.text
        order_id = int(message_text.split('ID –æ—Ä–¥–µ—Ä–∞: ')[1].split('\n')[0])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        if not await can_user_modify_order(order_id):
            await callback.message.answer(
                "–≠—Ç–æ—Ç –æ—Ä–¥–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω.",
                reply_markup=user_main_keyboard
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ä–¥–µ—Ä–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            order_id=order_id,
            original_message_id=callback.message.message_id
        )
        await state.set_state(OrderCancel.awaiting_confirmation)

        await callback.message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä?",
            reply_markup=user_warning_buttons
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ.")


@user.message(OrderCancel.awaiting_confirmation, F.text == "–û—Ç–º–µ–Ω–∏—Ç—å‚ùå")
async def confirm_cancel(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        order_id = data.get('order_id')
        original_message_id = data.get('original_message_id')

        if not order_id:
            raise ValueError("ID –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await update_order_status(order_id, "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
        order_info = await get_order_info(order_id)

        if order_info:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
            if original_message_id:
                try:
                    await message.bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=original_message_id
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for admin_id in ADMIN:
                try:
                    await message.bot.send_message(
                        admin_id,
                        f"‚ùå –û—Ä–¥–µ—Ä ID ‚Ññ {order_info['id']} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id} –æ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞: {e}")

            await message.answer(
                "–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!",
                reply_markup=user_main_keyboard
            )

        else:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ.",
                reply_markup=user_main_keyboard
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_cancel: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞.",
            reply_markup=user_main_keyboard
        )
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã
        try:
            await message.delete()
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {e}")

        await state.clear()


@user.message(OrderCancel.awaiting_confirmation, F.text == "–ù–µ –æ—Ç–º–µ–Ω—è—Ç—åüîô")
async def cancel_cancellation(message: Message, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã
        await message.delete()
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {e}")

    await state.clear()
    await message.answer(
        "–û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=user_main_keyboard
    )


@user.callback_query(F.data == "order_paid")
async def process_order_paid(callback: CallbackQuery, state: FSMContext):
    try:
        message_text = callback.message.text
        order_id = int(message_text.split('ID –æ—Ä–¥–µ—Ä–∞: ')[1].split('\n')[0])

        # Check if order can be modified
        if not await can_user_modify_order(order_id):
            await callback.message.answer(
                "–≠—Ç–æ—Ç –æ—Ä–¥–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω.",
                reply_markup=user_main_keyboard
            )
            return

        # Save order ID and message ID in state
        await state.update_data(
            order_id=order_id,
            original_message_id=callback.message.message_id
        )

        cancel_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await callback.message.answer(
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=cancel_keyboard
        )
        await state.set_state(OrderPaid.waiting_for_screenshot)

    except Exception as e:
        logging.error(f"Error in process_order_paid: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=user_main_keyboard
        )
        await state.clear()


@user.message(OrderPaid.waiting_for_screenshot, F.photo)
async def process_payment_screenshot(message: Message, state: FSMContext):
    try:
        # Get data from state
        data = await state.get_data()
        order_id = data.get('order_id')
        original_message_id = data.get('original_message_id')

        if not order_id:
            raise ValueError("Order ID not found")

        # Get the largest photo size file_id
        file_id = message.photo[-1].file_id

        # Get current UTC time for payment
        payment_time = datetime.utcnow()

        # Update order status, file_id and payment date
        success = await update_order_status(
            order_id=order_id,
            new_status="–û–ø–ª–∞—á–µ–Ω–æ",
            file_id=file_id,
            payment_date=payment_time
        )

        if not success:
            raise Exception("Failed to update order status")

        # Get updated order info
        order_info = await get_order_info(order_id)

        if order_info:
            # Try to delete original order message
            if original_message_id:
                try:
                    await message.bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=original_message_id
                    )
                except Exception as e:
                    logging.error(f"Failed to delete message: {e}")

            # Notify user
            await message.answer(
                "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=user_main_keyboard
            )

            # Format payment datetime for display
            payment_time_str = payment_time.strftime("%Y-%m-%d %H:%M:%S")

            # Prepare admin notification text
            admin_notification = (
                f"üí≥ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!\n\n"
                f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                f"üí∞ –í–∞–ª—é—Ç–∞: {order_info['currency']}\n"
                f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH\n"
                f"üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
                f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
                f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                f"‚åö –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {payment_time_str}UTC\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
            )

            # Send notification with screenshot to admins
            for admin_id in ADMIN:
                try:
                    await message.bot.send_photo(
                        chat_id=admin_id,
                        photo=file_id,
                        caption=admin_notification,
                        reply_markup=admin_order_actions
                    )
                except Exception as e:
                    logging.error(f"Failed to send notification to admin {admin_id}: {e}")

        await state.clear()

    except Exception as e:
        logging.error(f"Error in process_payment_screenshot: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.",
            reply_markup=user_main_keyboard
        )
        await state.clear()


async def can_user_modify_order(id: int) -> bool:

    status = await get_order_status(id)
    if status in ["–û—Ä–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚úÖ", "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º‚ùå"]:
        return False
    return True


@user.message(F.text == "–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞üßæ")
async def request_order_id(message: Message, state: FSMContext):
    await message.answer(
        "–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö –æ—Ä–¥–µ—Ä–∞—Ö –ø–æ ID –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫:",
        reply_markup=exit_keyboard
    )
    await state.set_state(OrderInfo.waiting_for_order_id)


@user.message(OrderInfo.waiting_for_order_id)
async def exit_from_request_order_id(message: Message, state: FSMContext):
    if message.text == '–í—ã–π—Ç–∏ –≤ –º–µ–Ω—éüö™':
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=user_main_keyboard
        )
        await state.clear()
        return


@user.message(OrderInfo.waiting_for_order_id)
async def process_order_id(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ä–¥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
            reply_markup=exit_keyboard
        )
        return

    order_id = int(message.text)
    order_info = await get_order_info(order_id)

    if order_info is None:
        await message.answer(
            "–û—Ä–¥–µ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=user_main_keyboard
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ—Ä–¥–µ—Ä —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if str(message.from_user.id) != str(order_info['user_id']):
        await message.answer(
            "–≠—Ç–æ –Ω–µ –í–∞—à –æ—Ä–¥–µ—Ä. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ —Å–≤–æ–∏—Ö –æ—Ä–¥–µ—Ä–∞—Ö.",
            reply_markup=user_main_keyboard
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
    order_message = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
        f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_info['user_id']}\n"
        f"üí∞ –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞: {order_info['currency']}\n"
        f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH "
        f"(‚âà {float(order_info['value']):.2f} {order_info['currency']})\n"
        f"üí±–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
        f"üåê –°–µ—Ç—å: {order_info['network']}\n"
        f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {order_info['bank_card']}\n"
        f"üëõ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {order_info['wallet']}\n"
        f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await message.answer(
        order_message,
        reply_markup=user_order_actions
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=user_main_keyboard
    )
    await state.clear()


@user.message(OrderPaid.waiting_for_screenshot, F.photo)
async def handle_payment_screenshot(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data.get('order_id')

        # Get the largest photo size file_id
        file_id = message.photo[-1].file_id

        # Update order status and save file_id
        success = await update_order_status(
            order_id=order_id,
            new_status="–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è‚è≥",
            file_id=file_id
        )

        if success:
            order_info = await get_order_info(order_id)
            if order_info:
                # Notify admins about payment
                admin_notification = (
                    f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
                    f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                    f"üî¢ ID –æ—Ä–¥–µ—Ä–∞: {order_info['id']}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                    f"üí∞ –í–∞–ª—é—Ç–∞: {order_info['currency']}\n"
                    f"üíµ –°—É–º–º–∞: {float(order_info['value']) * float(order_info['exchange_rate']):.2f} UAH\n"
                    f"üí± –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {order_info['exchange_rate']}\n"
                    f"üåê –°–µ—Ç—å: {order_info['network']}\n"
                    f"‚è≥ –°—Ç–∞—Ç—É—Å: {order_info['status']}"
                )

                # Send notification with screenshot to admins
                for admin_id in ADMIN:
                    try:
                        # First send the screenshot
                        await message.bot.send_photo(
                            chat_id=admin_id,
                            photo=file_id,
                            caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã"
                        )
                        # Then send order information
                        await message.bot.send_message(
                            chat_id=admin_id,
                            text=admin_notification,
                            reply_markup=admin_order_actions
                        )
                    except Exception as e:
                        logging.error(f"Failed to send notification to admin {admin_id}: {e}")

                await message.answer(
                    "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n"
                    "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                await state.clear()
            else:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.")

    except Exception as e:
        logging.error(f"Error in handle_payment_screenshot: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")

    await state.clear()


@user.message(OrderPaid.waiting_for_screenshot)
async def invalid_payment_proof(message: Message):
    """Handle invalid payment proof submissions"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=user_main_keyboard
        )
        return

    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n"
        "üì∏ –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )